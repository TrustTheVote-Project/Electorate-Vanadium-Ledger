#+title: The Friendly Vanadium Ledger Primer
#+date: <2021-11-05 Fri>
#+author: cew
#+email: cliff@osetfoundation.org

Welecome to the Friendly Vanadium Ledger Primer! This document will,
we hope, give you most of what you need to get a demonstration
instance of the Vanadium Ledger up and running in your own
environment.

*An important note:* In an actual deployment, of course, Electorate
Vanadium would run with a high level of security: there would be real
secrets, and there would be no path from the Internet to the Vanadium
APIs.

* Prerequisites
  This demo installation needs the AWS Cloud9 IDE. [[https://aws.amazon.com/cloud9/getting-started/][Getting started
  with AWS Cloud9]] gives step-by-step instructions creating an AWS
  account if you don't already have one; setting up AWS Cloud9;
  creating a Cloud9 environment to work in; and a basic tutorial to
  get you started.

* Installation
  The README file in the =src/= directory of this repository contains
  a terse set of directives for installing and deploying an instance
  of Vanadium Ledger.  It assumes you have set up your Cloud9
  environment and are logged into the Cloud9 shell.

* How to Append a Record to the Vanadium Ledger
  The Vanadium Agent can be configured to perform state-specific
  validations on the voter records being appended to the ledger, but
  for this demonstration the rules have been relaxed.

  Let us imagine that a voter has used an online tool to fill out a
  voter registration form:

  #+NAME: example_registration_form
  [[./assets/adams.png]]

  Let us also imagine that the data she entered into the form has been
  transmitted to the Registrar as a VRR record:

  #+begin_src xml
    <?xml version="1.0" encoding="UTF-8"?>
    <VoterRecordsRequest xmlns="http://itl.nist.gov/ns/voting/1500-102/v1"
	xmlns:xsd="https://www.w3.org/2001/XMLSchema"
	xmlns:xsi="http;//www.w3.org/2001/XMLSchema-instance"
	xmlns:addr_type="https://www.fgdc.gov/schemas/address/addr_type"
	xmlns:addr="https://www.fgdc.gov/schemas/address/addr">
	<GeneratedDate>2021-11-19</GeneratedDate>
	<RequestMethod>voter-via-mail</RequestMethod>
	<Subject>
	    <ContactMethod>
		<Type>email</Type>
		<Value>abigail@adams.com</Value>
	    </ContactMethod>
	    <DateOfBirth>1901-11-22</DateOfBirth>
	    <Name>
		<FirstName>Abigail</FirstName>
		<MiddleName>Smith</MiddleName>
		<LastName>Adams</LastName>
	    </Name>
	    <ResidenceAddress>
		<NumberedThoroughfareAddress_type>
		    <addr:CompletePlaceName>
			<addr_type:PlaceName>Quincy</addr_type:PlaceName>
		     </addr:CompletePlaceName>
		    <StateName>MA</StateName>
		</NumberedThoroughfareAddress_type>
	    </ResidenceAddress>
	</Subject>
	<Type>registration</Type>
    </VoterRecordsRequest>
  #+end_src

  

  We can create a simple script to post this record to the Ledger's
  API from the AWS Cloud9 terminal.  The script retrieves the
  authentication credentials and the URL for the API, and then uses
  =curl= to perform an HTTP POST.  (As always, the credentials are
  avaible for demonstration purposes only and would be secured in an
  actual deployment.)


  #+begin_src sh
    #!/bin/bash -e
    # test.sh

    cd "$(dirname ${BASH_SOURCE[0]})/.."

    export DOCUMENT_CONTENT="$(cat "$1")"

    export CREDENTIALS_STACK="CredentialsStack"
    export INTERFACE_STACK="InterfaceStack"

    export API_ENDPOINT_URL=$(aws cloudformation describe-stacks --stack-name $INTERFACE_STACK --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpointUrl`].OutputValue' --output text)
    export API_DOCUMENTS_URL="${API_ENDPOINT_URL}documents"

    export API_WRITER_TOKEN_ARN=$(aws cloudformation describe-stacks --stack-name $CREDENTIALS_STACK --query 'Stacks[0].Outputs[?OutputKey==`ApiWriterTokenArn`].OutputValue' --output text)
    export API_WRITER_TOKEN=$(aws secretsmanager get-secret-value --secret-id $API_WRITER_TOKEN_ARN --query 'SecretString' --output text)

    echo "Writing contents of $1 to ledger"
    curl -X POST --header "Authorization:$API_WRITER_TOKEN" --data "$DOCUMENT_CONTENT" "$API_DOCUMENTS_URL"
    echo "Contents written
  #+end_src

  Now we can simply use the script to post an append request to the
  Ledger's API:

  #+begin_src sh
    tests/write-document.sh tests/example.vrr.xml
  #+end_src

* How to Inspect the Ledger with Hyperledger Explorer
  Finally, we're going to show you how to inspect the Vanadium Ledger
  using HyperLedger Explorer, so you can see the VRR you've just
  posted.  Hyperledger Explorer is not part of the Vanadium Ledger
  itself: remember, Vanadium is a distributed system of independent
  cloud-based services.

  #+begin_src sh
    cd ~/src
    cdk deploy ExplorerStack
    scripts/setup-hyperledger-explorer.sh
    scripts/start-hyperledger-explorer.sh
  #+end_src

  Now click on Preview button in Cloud 9 IDE, and select Preview
  Running Application,then pop out into new browser tab with icon in
  upper-right of preview panel.
